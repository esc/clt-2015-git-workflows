== Intro ==

==== Intro ====

* Git-Workflows?

--1cm--

* Folge von Kommandos
* Nutzung von Branches und Tags

==== Übersicht ====
\tableofcontents

== Push 'n' Pull ==

==== Übersicht ====
\tableofcontents[currentsection,currentsubsection]

==== Push 'n' Pull Workflow ====

<[center]
<<<images/push-pull.pdf, scale=0.15>>>
[center]>

\begin{enumerate}
<[columns]
[[[ 5cm ]]]
\item Lokale Änderungen
* @vim ''datei''@
* @git add ''datei''@
* @git commit -m "''msg''"@
[[[ 5.5cm ]]]
\item Änderungen veröffentlichen
* @git push@
* Wenn @push@ fehlschlägt:
* @git pull@, dann @git push@
% ** @git pull@
% ** @git push@
[columns]>
\end{enumerate}

==== Push 'n' Pull -- Resultat ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/push-n-pull-result.pdf, scale=0.22>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Leicht für Anfänger
** Nur weniger Kommandos
--1cm--
* Nachteile
** Es entstehen Merge-Commits
** »Aber wir arbeiten doch alle auf @master@?\!«
** Rebase ist eine Option (für Anfänger?)
[columns]>

==== Push 'n' Pull -- Resultat mit @-{}-rebase@ ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/push-n-pull-rebase-result.pdf, scale=0.25>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Keine Merge-Commits
--1cm--
* Nachteile
** »Sinnloses« Linearisieren
** Feature-Commits in zufälliger Reihenfolge
** Konflikte beim Rebase?
[columns]>

==== Interlude: Darstellung von Git-Graphen ====

* Bei mir:
** Zeit läuft von unten nach oben
** Wie bei Gitk, Eclipse, SourceTree etc...

* Aber:
** Mehrere Commits auf einer Zeile \\ (vereinfacht die Darstellung)
** Bei Gitk, Eclipse, SourceTree ist das nicht so..

==== Interlude: Darstellung von Git-Graphen ====

<[center]
<<<images/graphs.pdf, scale=0.25>>>
[center]>

== Github-Flow ==

==== Übersicht ====
\tableofcontents[currentsection,currentsubsection]

==== Github-Flow ====

* Geeignet für Github
* Webinterface oder 'github' Kommandozeilenerweiterung
* Nutzt Feature-Branches

==== Github-Flow ====

<[center]
<<<images/githubflow.pdf, scale=0.27>>>
[center]>

\small
\begin{enumerate}
<[columns]
[[[ 5.5cm ]]]
'''Entwickler''': \\
\item Forkt ein Repository \\
\item Klont seinen Fork und macht Commits in einem Feature-Branch \\
\item Pusht den Feature-Branch in seinen Fork \\
\item Eröffnet einen Pull-Request \\
[[[ 5.5cm ]]]
'''Autor''': \\
\item Fetcht den Feature-Branch und mergt ihn \\
\item Pusht ins Original \\
\item '''oder''': Mergt den Pull-Request über das Webinterface \\
[columns]>
\end{enumerate}

==== Github-Flow -- Resultat ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/githubflow-resultat.pdf, scale=0.20>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Feature-Branches
--1cm--
* Nachteile
** Feature-Branches basieren vor dem Merge evtl. nicht auf dem aktuellen Master
** »Durcheinander«
[columns]>

==== Github-Flow -- Anmerkungen ====

* Beim Merge von Pull-Requests wird der Merge-Commit automatisch forciert
* Weitere Schritte vom Entwickler nötig
** --> Feature-Branches löschen
** --> Synchronisation vom @master@ im Fork mit @master@ aus Original

== Rebase 'n' Force-Merge ==

==== Übersicht ====
\tableofcontents[currentsection,currentsubsection]

==== Rebase 'n' Force-Merge Workflow ====

<[center]
<<<images/rebase-force.pdf, scale=0.17>>>
[center]>

==== Beschreibung der Schritte ====

\small
<[columns]
[[[ 6.5cm ]]]
\begin{enumerate}
\item '''Repository clonen:'''\\
    @git clone <url>@
\item '''Feature-Branch anlegen'''\\
    @git checkout -b feature@
\item '''Arbeiten:'''\\
    @vim datei@\\
    @git add datei@\\
    @git commit -m "<msg>"@
\item '''Getane Arbeit hochladen'''\\
    @\# beim ersten Mal@\\
    @git push origin -u feature@\\
    @git push@
\item '''Lokalen @master@ aktualisieren:'''\\
    @git checkout master@\\
    @git pull@
\end{enumerate}
[[[ 6.5cm ]]]
\begin{enumerate}
\setcounter{enumi}{5}
\item '''Rebase @feature@ auf @master@:'''\\
    @git checkout feature@\\
    @git rebase master@
\item '''Forcierter Merge von @feature@:'''\\
    @git checkout master@\\
    @git merge -{}-no-ff feature@
\item '''@master@  Hochladen:'''\\
    @git push@
\item '''Fehlschlag: Merge rückgängig:'''\\
    @git reset -{}-hard HEAD\^@\\
\item '''Erfolg: @feature@ löschen,\\lokal und remote:'''\\
    @git branch -d feature@\\
    @git push origin -{}-delete feature@
\end{enumerate}
[columns]>

==== Rebase 'n' Force-Merge -- Force-Merge ====

<[columns]
[[[ 5cm ]]]
<<<images/merge-no-ff.pdf, scale=0.25>>>

[[[ 5cm ]]]
* Fast-Forward vermeiden
--0.25cm--
* Merge-Commit erzwingen
** Nur so kann @git revert@ einen Merge rückgängig machen
--0.25cm--
* Merge-Commit als »sinvolle« Markierung
[columns]>

==== Rebase 'n' Force-Merge -- Rebase ====

<[columns]
[[[ 5cm ]]]
<<<images/rebase.pdf, scale=0.25>>>

[[[ 5cm ]]]
* »Auf eine neue Basis stellen«
* Integration von Änderungen aus @master@
* Vorbereitung für den Merge
[columns]>

==== Rebase 'n' Force-Merge -- Resultat ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/rebase-n-force-result.pdf, scale=0.14>>>
[center]>
[[[ 7cm ]]]
* Vorteile
** Saubere history
** Feature-Branches
** Merges sinnvoll
--1cm--
* Nachteile
** Verständnis von Git gebraucht
** Mehrere Kommandos nötig
[columns]>

==== Rebase 'n' Force-Merge -- Anmerkungen ====

* Kann auch im Github-Flow verwendet werden
** --> Feature-Branches vor dem Merge des Pull-Request per Force-Push aktualisieren
** --> Beim Merge von Pull-Requests wird der Merge-Commit automatisch forciert

== Gitflow ==

==== Übersicht ====
\tableofcontents[currentsection,currentsubsection]

==== Gitflow ====

* Großflächiges Branch-Modell

--0.5cm--

* Branches
** @master@ --> Stabil/Produktion
** @develop@ --> Instabil/Vorbereitung
** @feature@ --> Feature-Entwicklung
** @release@ --> Letzte Releasearbeiten
** @hotfix@ --> Hotfixes

--0.5cm--

* \href{http://nvie.com/posts/a-successful-git-branching-model/}{http://nvie.com/posts/a-successful-git-branching-model/}

==== Gitflow ====

<[center]
<<<images/gitflow.pdf, scale=0.09>>>
[center]>

==== Gitflow -- @pdftk gitflow.pdf cat 1E output gitflow-rotated.pdf@ ====

<[center]
<<<images/gitflow-rotated.pdf, scale=0.15>>>
[center]>

==== Gitflow -- @master@ und @develop@ ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/gitflow-master-develop.pdf, scale=0.16>>>
[center]>
[[[ 7cm ]]]
* Zwei langlebige Branches
** @master@ --> Stabil/Produktion
** @develop@ --> Instabil/Vorbereitung
[columns]>

==== Gitflow -- Feature-Branches ====

<[columns]
[[[ 3cm ]]]
<[center]
<<<images/gitflow-feature-branches.pdf, scale=0.18>>>
[center]>
[[[ 7cm ]]]
* Neue Features werden hier entwickelt
* Zweigen ab von @develop@
* Werden gemergt nach @develop@
* Wenn fertig --> löschen nicht vergessen!
[columns]>

==== Gitflow -- @release@ ====

<[columns]
[[[ 4cm ]]]
<[center]
<<<images/gitflow-release.eps, scale=0.17>>>
[center]>
[[[ 7cm ]]]
* Release-Vorbereitung
* Letzte Typo-Fixes
* Changelog, Version-Bump etc…
* Wichtige Änderungen --> @develop@
* Wenn fertig --> @master@ und @develop@
* Tags werden auf @master@ gesetzt
[columns]>

==== Gitflow -- @hotfix@ ====

<[columns]
[[[ 4cm ]]]
<[center]
<<<images/gitflow-hotfix.eps, scale=0.18>>>
[center]>
[[[ 7cm ]]]
* Security-kritische Fixes --> Produktion
* Mergt auch --> @develop@
[columns]>

==== Gitflow -- Anmerkungen ====

* Alle Merges sollten mit @-{}-no-ff@ passieren
* Triviale Commits auf @develop@?
* Rebase 'n' Force-Merge auch hier möglich
* Namensräume für Feature-Branches

==== Gitflow -- Erweiterung Nr. 1: @hotfix@ über @master@  ====

<[columns]
[[[ 4cm ]]]
<[center]
<<<images/gitflow-hotfix-alternate.eps, scale=0.18>>>
[center]>
[[[ 7cm ]]]
* Unterschiedliche »Erreichbarkeit«
* @git describe@
--0.25cm--
* Alt/Grau --> @v0.1-5-g<sha1>@
* Neu/Schwarz --> @v0.2-2-g<sha1>@
--0.25cm--
* Gilt auch für @release@
[columns]>

==== Gitflow -- Erweiterung Nr. 2: Release-Candidate-Tags auf @release@ ====

<[columns]
[[[ 4cm ]]]
<[center]
<<<images/gitflow-release-tags.eps, scale=0.17>>>
[center]>
[[[ 7cm ]]]
* Release-Candidate-Tags auf @release@
* Suffix: @-rc''N''@
[columns]>

==== Gitflow -- Erweiterung Nr. 3: Rebase gegen @hotfix@  ====

<[columns]
[[[ 4.5cm ]]]
<[center]
<<<images/gitflow-rebase-feature.pdf, scale=0.16>>>
[center]>
[[[ 7cm ]]]
* Hotfixes per @rebase@ in Feature-Branches integrieren
* Hier mit der alternativen Merge-Route
* (Evtl. wurde der Hotfix per Cherry-Pick übertragen)
[columns]>

== Andere ==

=== Gitworkflows ===

==== Übersicht ====
\tableofcontents[currentsection,currentsubsection]

==== Manpage: Gitworkflows ====

<[block]{}
@man gitworkflows@
[block]>

--1cm--

* Älteres Model
* Info über @git.git@
* Sammlung von Best-Practices
* Vorschläge und Konzepte, e.g. »Throw-Away-Integration«

--0.25cm--

* Keine Bilder :(

=== Gerrit Workflow ===

==== Übersicht ====
\tableofcontents[currentsection,currentsubsection]

==== Gerrit Workflow ====

* Hosting, Webinterface für Code-Review
* Konzept: ''Pending Changes''
* Eigener Workflow mit Feature-Branches und Automerging
* Genutzt von Wikimedia, OpenStack und Android

==== Gerrit Workflow ====

<[center]
<<<images/gerrit.pdf, scale=0.4>>>
[center]>

== Outro ==

==== Übersicht ====
\tableofcontents[currentsection,currentsubsection]

==== Fazit ====

* In der Praxis macht sowieso jeder was er will
** --> nicht ärgern ;-)

--0.25cm--

* Nutzt Feature-Branches\!\!\!

* Projektgröße?
** Für diese Folien reichte ein einzelner @master@ (KISS)

* Eigene Arbeitsweise Schritt für Schritt erweitern

==== Fragen? ====

* Quellen:
** \href{https://github.com/esc/clt-2015-git-workflows}{https://github.com/esc/clt-2015-git-workflows}

* Danke:
** Julius Plenz für Anregungen, Ideen und Patches
** Jens Kubieziel für das erste Patch


* Alles mit Open-Source gemacht!
** \href{http://wiki2beamer.sourceforge.net/}{Wiki2beamer}
** \href{http://latex-beamer.sourceforge.net/}{\LaTeX beamer}
** \href{http://projects.gnome.org/dia/}{Dia}
** \href{http://blog.hartwork.org/?p=52}{ccBeamer}
** @make@, @vim@, @zsh@, @git@ usw...

* \href{http://www.opensourceschool.de/schulungen/termine/Git/04-05-15}{Git-Schulungen in München (z.B. 04.--05.05.2015)}
* Unser Git-Buch: \href{http://gitbu.ch}{http://gitbu.ch}
